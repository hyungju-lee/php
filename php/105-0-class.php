<?php
    /*
     * class 사용하기
     * 학습 내용 : class를 사용하는 방법에 대해 학습합니다.
     * 힌트 내용 : 복잡한 시스템을 구현할 때 클래스를 사용하면 편리합니다.
     *
     * 대규모 시스템을 개발하는 것은 많은 변수와 함수를 사용함을 의미합니다.
     * 이러한 환경에서 기능을 변경하는 것은 해당 기능의 코드를 찾는 것만으로도 어려운 일이 되기도 합니다.
     * 이를 방지하기 위해 클래스를 사용하여 시스템을 개발합니다.
     * 클래스는 어떠한 특정 기능에 관계가 있는 변수와 함수를 모아놓은 것을 의미합니다.
     * 특정한 기능이라면 다음과 같은 예를 들 수 있습니다.
     *
     * 데이터베이스를 예로 들겠습니다.
     * a.php 페이지에 데이터베이스의 데이터를 불러오는 프로그래밍 코드가 있고,
     * b.php 페이지에는 데이터베이스의 데이터를 입력하는 코드가 있으며,
     * c.php 페이지에는 데이터베이스의 데이터를 수정하는 코드가 있다고 가정합니다.
     *
     * 데이터베이스에 대해 입력 기능, 출력 기능, 수정 기능이 3개의 페이지에서 독립적으로 구동된다는 것을 알 수 있습니다.
     * 이렇게 어느 하나의 대상에 대한 기능을 하나로 합칠 때 생성한 class를 대상으로
     * 데이터를 불러오는 기능, 데이터를 입력하는 기능, 데이터를 수정하는 기능 등을 모아놓을 수 있습니다.
     * 이렇게 class를 하나의 객체(사물, 물건 등을 뜻함)로 의미하여 이를 객체지향 프로그래밍이라고 부릅니다.
     *
     * class 사용 방법
     * class 클래스명 {
     *  기능 구현
     * }
     *
     * PHP에서 class를 선언할 때 주의할 점은 같은 이름의 class를 2개 이상 만들 수 없다는 것입니다.
     * a라는 class가 2개 이상 선언되면 오류가 발생합니다.
     *
     * 글을 쓸 때 사용하는 pen을 프로그래밍으로 사물화한다면 다음과 같이 표현할 수 있습니다.
     *
     * class pen {
     *
     * }
     *
     * 여러 종류의 펜이 있고 색, 두께, 가격도 각각 다릅니다.
     * 이러한 데이터를 대입하기 위한 변수를 class 내에 선언할 수 있습니다.
     * 변수는 class 내에서 프로퍼티(property)라고 부릅니다.
     *
     * 팬의 색을 의미하는 프로퍼티 color, 두께를 의미하는 프로퍼티 bold, 가격을 의미하는 프로퍼티 price를 선언하면 다음과 같습니다.
     *
     * class pen {
     *  public $color;
     *  public $bold;
     *  public $price;
     * }
     *
     * 프로퍼티 앞에 public이 있습니다.
     * 이것은 접근 제한자입니다.
     * 접근 제한자의 종류와 기능은 다음과 같습니다.
     *
     * 접근 제한자
     * public : 클래스 안에서든 밖에서든 접근 가능, 상속 가능
     * protected : 클래스 내부에서만 접근 가능, 상속 가능
     * private : 클래스 내부에서만 접근 가능, 상속 불가
     *
     * 기능을 적용하기 위해 클래스에 함수를 만듭니다.
     * 함수는 class 내에서 메소드(method)라고 부릅니다.
     * 메소드를 선언하는 방법은 함수를 선언하는 방법과 크게 다르지 않습니다.
     *
     * 클래스에 메소드 만들기
     * class 클래스명 {
     *  프로퍼티
     *
     *  function 메소드명() {
     *
     *  }
     * }
     *
     * 메소드를 선언할 때 function의 앞에 접근 제한자를 사용합니다.
     * 메소드 생성 시 접근 제한자를 사용하지 않을 때 public이 기본적으로 생성됩니다.
     * 클래스 pen에 기능을 적용하겠습니다.
     * pen의 본래 목적은 글을 쓰거나 그림을 그리는 것으로 write() 함수와 draw() 함수를 pen 클래스에 만들겠습니다.
     * write() 메소드와 draw() 메소드를 만들면 다음과 같습니다.
     * */

    class pen {
        public $color;
        public $bold;
        public $price;

        function write($contents) {
            echo "{$contents}을 쓰다.";
        }

        function draw($contents) {
            echo "{$contents}을 그리다.";
        }
    }

    /*
     * class를 사용하는 방법에 대해 알아보겠습니다.
     * 생성한 class를 사용하려면 class의 객체를 생성해야 합니다.
     * 이것을 인스턴스 생성이라고 부릅니다.
     *
     * 다음은 pen 클래스의 인스턴스를 생성하는 방법입니다.
     *
     * 클래스의 인스턴스 생성하기
     * new 클래스명();
     *
     * 사용할 때마다 매번 생성할 수 없으므로 이것을 변수에 대입하여 사용합니다.
     * 변수 = new 클래스명();
     *
     * 다음은 pen 클래스의 인스턴스를 생성하는 방법입니다.
     * */

    $pen = new pen();

    /*
     * 클래스에 있는 메소드를 호출하는 방법
     * 클래스 객체 변수 -> 호출할 메소드명();
     *
     * 클래스 pen에 있는 메소드 write()를 호출하면 다음과 같습니다.
     * write() 메소드에는 파라미터가 있으므로 아규먼트를 사용합니다.
     * 사용하지 않으면 오류가 발생합니다.
     * 
     * */
    
    $pen -> write('책');

?>

